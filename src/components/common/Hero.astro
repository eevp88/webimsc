---
export interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  content?: string;
  image?: string | any; // TODO: find HTMLElementProps
  action?: string;
}

const {
  id,
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  content = await Astro.slots.render("content"),
  image = await Astro.slots.render("image"),
  action = await Astro.slots.render("action"),
} = Astro.props;
---

<section class="relative py-16" {...id ? { id } : {}}>
  <div
    class="absolute inset-0 bg-cover bg-center"
    style={{ backgroundImage: `url(${image})` }}
  >
  </div>
  <div
    class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/70 to-transparent"
  >
  </div>
  <div
    class="relative z-[1] mx-auto px-4 text-center text-white sm:px-6 lg:px-8"
  >
    <div class="mx-auto max-w-3xl">
      {
        title && (
          <h1
            class="text-4xl font-extrabold tracking-tight sm:text-5xl md:text-6xl dark:text-gray-200"
            set:html={title}
          />
        )
      }
      {
        subtitle && (
          <p
            class="text-xl text-muted mb-6 dark:text-slate-300"
            set:html={subtitle}
          />
        )
      }
      {
        content && (
          <p
            class="mt-4 text-lg font-semibold text-gray-200"
            set:html={content}
          />
        )
      }
      {action && <div class="mt-10" set:html={action} />}
    </div>
  </div>
</section>
<style>
  /* Asegúrate de que el contenedor del Hero tenga una altura mínima */
  section {
    min-height: 60vh; /* Ajusta este valor según tus necesidades */
  }
</style>
